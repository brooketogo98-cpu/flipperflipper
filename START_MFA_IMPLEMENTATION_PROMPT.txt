═══════════════════════════════════════════════════════════════════════════
🔒 MFA IMPLEMENTATION TASK - COMPLETE PROMPT FOR AI DEVELOPER
═══════════════════════════════════════════════════════════════════════════

YOUR MISSION:
Implement Multi-Factor Authentication (MFA/2FA) for the Oranolio/Stitch RAT web application login system using TOTP (Time-based One-Time Password) compatible with Microsoft Authenticator, Google Authenticator, and similar apps.

═══════════════════════════════════════════════════════════════════════════
📚 CRITICAL: READ THESE DOCUMENTS FIRST (IN THIS EXACT ORDER)
═══════════════════════════════════════════════════════════════════════════

1. /workspace/MFA_PROJECT_SUMMARY.md
   → Start here for quick overview and context

2. /workspace/LOGIN_SYSTEM_SECURITY_ANALYSIS.md  
   → Understand current system, flaws, and what you're fixing

3. /workspace/MFA_IMPLEMENTATION_GUIDE_FOR_AI.md
   → YOUR BIBLE - Complete step-by-step implementation guide
   → Follow EVERY step exactly as written
   → This assumes you know NOTHING and holds your hand through everything

4. /workspace/CLAUDE_AI_HANDOFF_PROMPT.md
   → Additional context and requirements

═══════════════════════════════════════════════════════════════════════════
⚡ QUICK START INSTRUCTIONS
═══════════════════════════════════════════════════════════════════════════

PHASE 1: PREPARATION (DO THIS FIRST)
□ Read all 4 documentation files completely
□ Understand current authentication flow in /workspace/web_app_real.py
□ Backup the current system: tar -czf mfa_backup_$(date +%Y%m%d).tar.gz web_app_real.py config.py templates/
□ Install dependencies: pip3 install pyotp==2.9.0 qrcode==7.4.2 pillow==10.1.0 cryptography==41.0.7

PHASE 2: IMPLEMENTATION (FOLLOW THE GUIDE)
Follow /workspace/MFA_IMPLEMENTATION_GUIDE_FOR_AI.md EXACTLY from STEP 1 to STEP 8

You will create these NEW files:
□ /workspace/mfa_manager.py                    - Core MFA logic
□ /workspace/mfa_database.py                   - Database operations  
□ /workspace/create_mfa_tables.py              - Database schema
□ /workspace/templates/mfa_setup.html          - MFA setup page
□ /workspace/templates/mfa_verify.html         - MFA verification page
□ /workspace/templates/mfa_backup_codes.html   - Backup codes display
□ /workspace/test_mfa.py                       - Unit tests

You will modify these EXISTING files:
□ /workspace/web_app_real.py                   - Update /login route, add MFA routes
□ /workspace/config.py                         - Add MFA configuration (optional)

PHASE 3: TESTING (VERIFY EVERYTHING)
□ Run: python3 test_mfa.py (all tests must pass)
□ Manual testing: Login flow, QR code scanning, backup codes
□ Security verification: Secrets encrypted, codes hashed, audit logs working

═══════════════════════════════════════════════════════════════════════════
🎯 WHAT YOU'RE BUILDING - USER EXPERIENCE
═══════════════════════════════════════════════════════════════════════════

FIRST-TIME LOGIN:
User → Enters username + password
     → Redirects to /mfa/setup  
     → Scans QR code with Microsoft Authenticator
     → Enters 6-digit code to verify
     → Gets 10 backup recovery codes
     → Downloads/saves backup codes
     → Redirects to dashboard ✅

SUBSEQUENT LOGINS:
User → Enters username + password
     → Redirects to /mfa/verify
     → Opens authenticator app
     → Enters current 6-digit code
     → Redirects to dashboard ✅

IF PHONE LOST:
User → Enters username + password
     → Redirects to /mfa/verify
     → Clicks "Lost your device?"
     → Enters backup recovery code
     → Redirects to dashboard ✅
     → Prompted to reset MFA

═══════════════════════════════════════════════════════════════════════════
🔐 CRITICAL SECURITY REQUIREMENTS (NON-NEGOTIABLE)
═══════════════════════════════════════════════════════════════════════════

✅ TOTP secrets MUST be encrypted in database (using Fernet/AES-128)
✅ Backup codes MUST be hashed like passwords (SHA-256)
✅ MFA setup/verify sessions MUST timeout after 5 minutes
✅ Users MUST NOT be able to bypass MFA by URL manipulation
✅ All MFA events MUST be logged to mfa_audit_log table
✅ Failed MFA attempts MUST be tracked and rate limited
✅ Encryption key file MUST have 0600 permissions (Linux/Unix)
✅ Backup codes are ONE-TIME USE (deleted after use)

═══════════════════════════════════════════════════════════════════════════
✅ SUCCESS CRITERIA - YOU'RE DONE WHEN ALL THESE PASS
═══════════════════════════════════════════════════════════════════════════

FUNCTIONALITY:
□ QR code displays correctly on /mfa/setup
□ QR code scans successfully with Microsoft Authenticator  
□ Manual secret entry works as alternative
□ TOTP 6-digit code verification succeeds
□ Invalid TOTP codes show helpful error
□ 10 backup codes generate and display
□ Backup codes download as text file
□ Backup code recovery works
□ Used backup codes cannot be reused
□ Subsequent logins require MFA
□ Session timeout works (5 minutes)

SECURITY:
□ TOTP secrets encrypted in user_mfa table (verify with: sqlite3 /workspace/Application/stitch.db "SELECT mfa_secret FROM user_mfa LIMIT 1;")
□ Backup codes hashed in user_mfa table  
□ MFA events logged in mfa_audit_log table
□ Cannot access /dashboard without completing MFA
□ Direct URL access to /dashboard blocked until MFA verified
□ Encryption key file exists: /workspace/Application/.mfa_encryption_key

DATABASE:
□ user_mfa table created
□ mfa_audit_log table created
□ Indexes created on both tables
□ Foreign key constraints working

CODE QUALITY:
□ All unit tests pass: python3 test_mfa.py
□ No Python syntax errors
□ All imports resolve correctly
□ Functions have docstrings
□ Code follows PEP 8 style

═══════════════════════════════════════════════════════════════════════════
🚨 COMMON MISTAKES TO AVOID
═══════════════════════════════════════════════════════════════════════════

❌ DON'T store TOTP secrets as plaintext
✅ DO encrypt with mfa_manager.encrypt_secret()

❌ DON'T store backup codes as plaintext  
✅ DO hash with mfa_manager.hash_backup_code()

❌ DON'T skip backup before making changes
✅ DO create backup tarball first

❌ DON'T forget session timeouts
✅ DO expire MFA sessions after 5 minutes

❌ DON'T allow MFA bypass
✅ DO enforce MFA check in @login_required decorator

❌ DON'T forget to test with real authenticator app
✅ DO test with Microsoft Authenticator on actual phone

═══════════════════════════════════════════════════════════════════════════
📊 DELIVERABLES - WHAT TO PROVIDE WHEN COMPLETE
═══════════════════════════════════════════════════════════════════════════

1. LIST OF FILES CREATED:
   - Confirm all 7 new files created with file sizes

2. LIST OF FILES MODIFIED:
   - Show git diff --stat for web_app_real.py and config.py

3. TEST RESULTS:
   - Output from: python3 test_mfa.py
   - Confirmation all 5 unit tests passed

4. DATABASE VERIFICATION:
   - Output from: sqlite3 /workspace/Application/stitch.db ".tables" | grep mfa
   - Confirm user_mfa and mfa_audit_log tables exist

5. SECURITY VERIFICATION:
   - Confirm secrets are encrypted (not readable plaintext)
   - Confirm backup codes are hashed
   - Show sample from mfa_audit_log table

6. MANUAL TEST CONFIRMATION:
   - Confirm QR code displays
   - Confirm QR scans with authenticator app
   - Confirm TOTP verification works
   - Confirm backup codes work

═══════════════════════════════════════════════════════════════════════════
🔧 TROUBLESHOOTING QUICK REFERENCE
═══════════════════════════════════════════════════════════════════════════

If dependencies fail to install:
→ pip3 install --upgrade pip
→ pip3 install --force-reinstall pyotp qrcode pillow cryptography

If database errors occur:
→ python3 create_mfa_tables.py
→ Check: ls -la /workspace/Application/stitch.db

If TOTP always fails:
→ Check server time: date
→ Should be within 30 seconds of phone time
→ Install NTP: sudo apt-get install ntp

If QR code doesn't display:
→ Verify: python3 -c "from PIL import Image; print('OK')"
→ Reinstall: pip3 install --force-reinstall pillow

═══════════════════════════════════════════════════════════════════════════
📍 FILE LOCATIONS - QUICK REFERENCE MAP
═══════════════════════════════════════════════════════════════════════════

Documentation (READ THESE):
/workspace/MFA_PROJECT_SUMMARY.md               ← Start here
/workspace/LOGIN_SYSTEM_SECURITY_ANALYSIS.md    ← Context & flaws
/workspace/MFA_IMPLEMENTATION_GUIDE_FOR_AI.md   ← FOLLOW THIS
/workspace/CLAUDE_AI_HANDOFF_PROMPT.md          ← Extra requirements

Current System (UNDERSTAND THESE):
/workspace/web_app_real.py                      ← Main Flask app (WILL MODIFY)
/workspace/config.py                            ← Configuration (WILL MODIFY)
/workspace/auth_utils.py                        ← Auth patterns to follow
/workspace/templates/login.html                 ← Current login page

What You'll Create:
/workspace/mfa_manager.py                       ← Core MFA logic
/workspace/mfa_database.py                      ← DB operations
/workspace/create_mfa_tables.py                 ← Schema creation
/workspace/test_mfa.py                          ← Unit tests
/workspace/templates/mfa_setup.html             ← Setup page
/workspace/templates/mfa_verify.html            ← Verify page
/workspace/templates/mfa_backup_codes.html      ← Backup codes page

Database:
/workspace/Application/stitch.db                ← SQLite database
/workspace/Application/.mfa_encryption_key      ← Auto-generated Fernet key

═══════════════════════════════════════════════════════════════════════════
🎬 START HERE - IMMEDIATE NEXT STEPS
═══════════════════════════════════════════════════════════════════════════

1. Read /workspace/MFA_PROJECT_SUMMARY.md (5 minutes)
2. Read /workspace/MFA_IMPLEMENTATION_GUIDE_FOR_AI.md Section 1-3 (20 minutes)
3. Create backup: tar -czf mfa_backup_$(date +%Y%m%d).tar.gz web_app_real.py config.py templates/
4. Install dependencies: pip3 install pyotp qrcode pillow cryptography
5. Begin STEP 1 of implementation guide: Create mfa_manager.py
6. Follow guide steps 1-8 sequentially
7. Run tests and verify checklist
8. Report completion with deliverables

═══════════════════════════════════════════════════════════════════════════
💡 REMEMBER
═══════════════════════════════════════════════════════════════════════════

- The implementation guide has EVERY line of code you need
- Don't improvise - follow the guide exactly
- Test frequently as you implement
- Security is critical - don't skip encryption/hashing
- When in doubt, refer back to the guide
- The guide assumes you know nothing - it's designed for success

═══════════════════════════════════════════════════════════════════════════
🚀 YOU'VE GOT THIS!
═══════════════════════════════════════════════════════════════════════════

Everything you need is in /workspace/MFA_IMPLEMENTATION_GUIDE_FOR_AI.md

Follow it step by step, test thoroughly, and you'll build a secure, 
production-ready MFA system that works with Microsoft Authenticator.

Good luck! 🔒✨

═══════════════════════════════════════════════════════════════════════════
END OF PROMPT - BEGIN IMPLEMENTATION NOW
═══════════════════════════════════════════════════════════════════════════
