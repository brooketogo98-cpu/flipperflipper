═══════════════════════════════════════════════════════════════════════════
🔐 PASSWORDLESS EMAIL + MFA IMPLEMENTATION - COMPLETE AI PROMPT
═══════════════════════════════════════════════════════════════════════════

YOUR MISSION:
Implement a PASSWORDLESS authentication system using:
1. EMAIL VERIFICATION CODE (6 digits sent to email)
2. TOTP MFA (Microsoft Authenticator / Google Authenticator)

NO PASSWORDS NEEDED - Just email + phone app!

Primary Email: brooketogo98@gmail.com

═══════════════════════════════════════════════════════════════════════════
📚 CRITICAL: READ THESE DOCUMENTS IN THIS EXACT ORDER
═══════════════════════════════════════════════════════════════════════════

STEP 1: Read for context and understanding
   → /workspace/PASSWORDLESS_MFA_SECURITY_ANALYSIS.md
   (Why passwordless is better, security comparison, architecture)

STEP 2: Read for complete implementation instructions  
   → /workspace/PASSWORDLESS_MFA_IMPLEMENTATION_GUIDE.md
   (Step-by-step code, proper ordering, every file you need)

STEP 3: Read for final details and checklist
   → /workspace/PASSWORDLESS_MFA_AI_PROMPT.md
   (Complete requirements, testing, deliverables)

═══════════════════════════════════════════════════════════════════════════
🎯 WHAT YOU'RE BUILDING
═══════════════════════════════════════════════════════════════════════════

❌ OLD SYSTEM (WEAK):
   User → Username + Password → Login
   (ONE factor, vulnerable to phishing, keyloggers, breaches)

✅ NEW SYSTEM (STRONG):
   User → Email Address
   System → Sends 6-digit code to email
   User → Enters code from email ✅ (Factor 1: Email access)
   User → Enters TOTP from Microsoft Authenticator ✅ (Factor 2: Phone)
   System → User logged in ✅✅

SECURITY IMPROVEMENT: 95% reduction in successful attacks!

USER EXPERIENCE:

First Time:
1. Enter brooketogo98@gmail.com
2. Check email → Enter 6-digit code
3. Scan QR code with Microsoft Authenticator
4. Enter first TOTP code  
5. Save 10 backup codes
6. ✅ Logged in!

Every Login After:
1. Enter email
2. Check email → Enter code
3. Open auth app → Enter TOTP
4. ✅ Logged in!

═══════════════════════════════════════════════════════════════════════════
⚙️ BEFORE YOU START: GMAIL SETUP (DO THIS FIRST!)
═══════════════════════════════════════════════════════════════════════════

CRITICAL: Set up Gmail App Password for brooketogo98@gmail.com

1. Go to: https://myaccount.google.com/security
2. Login as brooketogo98@gmail.com
3. Enable 2-Step Verification (if not already enabled)
4. Create App Password:
   - Select "Mail" + "Other" 
   - Name: "Oranolio RAT SMTP"
   - COPY THE 16-CHARACTER PASSWORD
   - Example: "abcd efgh ijkl mnop"

5. Set environment variables:
   export STITCH_SMTP_USER="brooketogo98@gmail.com"
   export STITCH_SMTP_PASSWORD="abcdefghijklmnop"  # Remove spaces!
   export STITCH_SMTP_HOST="smtp.gmail.com"
   export STITCH_SMTP_PORT="587"
   export STITCH_SMTP_USE_TLS="true"

6. Test it works:
   python3 test_email_sending.py

═══════════════════════════════════════════════════════════════════════════
🛠️ IMPLEMENTATION PHASES (FOLLOW THIS EXACT ORDER!)
═══════════════════════════════════════════════════════════════════════════

⚠️ CRITICAL: This order prevents breaking the existing system!

PHASE 1: Email Infrastructure ✅
□ Create /workspace/email_manager.py
□ Create /workspace/create_email_tables.py  
□ Create /workspace/email_auth.py
□ Create /workspace/test_email_sending.py
□ Run: python3 create_email_tables.py
□ Test: python3 test_email_sending.py
□ Verify email received at brooketogo98@gmail.com

PHASE 2: Email Login Pages ✅
□ Create /workspace/templates/email_login.html
□ Create /workspace/templates/email_verify.html

PHASE 3: MFA Setup ✅
□ Create /workspace/mfa_manager.py
□ Create /workspace/mfa_database.py
□ Create /workspace/create_mfa_tables.py
□ Create /workspace/templates/mfa_setup.html
□ Create /workspace/templates/mfa_verify.html
□ Create /workspace/templates/mfa_backup_codes.html
□ Run: python3 create_mfa_tables.py

PHASE 4: Update web_app_real.py ✅
□ Add /login route (email entry)
□ Add /verify-email route (code verification)
□ Add /mfa/setup route (QR code)
□ Add /mfa/verify route (TOTP verification)
□ Add /mfa/backup-codes route (show backup codes)

PHASE 5: Testing ✅
□ Test email sending
□ Test email code verification
□ Test MFA setup with QR code
□ Test TOTP verification
□ Test backup codes
□ Test full login flow
□ Verify security measures

═══════════════════════════════════════════════════════════════════════════
📋 COMPLETE FILE CHECKLIST
═══════════════════════════════════════════════════════════════════════════

NEW FILES TO CREATE:

Email Auth:
□ /workspace/email_manager.py                    (Email sending, code generation)
□ /workspace/email_auth.py                       (Email verification logic)
□ /workspace/create_email_tables.py              (Database schema)
□ /workspace/test_email_sending.py               (Test email delivery)

MFA:
□ /workspace/mfa_manager.py                      (TOTP handling)
□ /workspace/mfa_database.py                     (MFA database ops)
□ /workspace/create_mfa_tables.py                (MFA database schema)
□ /workspace/test_mfa.py                         (MFA unit tests)

HTML Templates:
□ /workspace/templates/email_login.html          (Email entry page)
□ /workspace/templates/email_verify.html         (Code verification page)
□ /workspace/templates/mfa_setup.html            (QR code setup page)
□ /workspace/templates/mfa_verify.html           (TOTP verification page)
□ /workspace/templates/mfa_backup_codes.html     (Backup codes display)

FILES TO MODIFY:
□ /workspace/web_app_real.py                     (Add all new routes)
□ /workspace/config.py                           (Add email/MFA config - optional)

DEPENDENCIES TO INSTALL:
□ pip3 install pyotp==2.9.0 qrcode==7.4.2 pillow==10.1.0 cryptography==41.0.7

═══════════════════════════════════════════════════════════════════════════
🔒 SECURITY REQUIREMENTS (NON-NEGOTIABLE!)
═══════════════════════════════════════════════════════════════════════════

EMAIL CODES:
✅ Generated using secrets.randbelow(10) (crypto-secure)
✅ Stored as SHA-256 hashes (NOT plaintext)
✅ Expire after 10 minutes
✅ One-time use only (marked as used)
✅ Rate limited: Max 3 codes per email per hour

TOTP SECRETS:
✅ Encrypted with Fernet/AES-128 before storing
✅ Never stored as plaintext
✅ Encryption key: /workspace/Application/.mfa_encryption_key
✅ Key file permissions: 0600 (owner only)

BACKUP CODES:
✅ Hashed with SHA-256
✅ One-time use (deleted after use)
✅ 10 codes generated per user

SESSIONS:
✅ Email verification session: 15 minute timeout
✅ MFA verification session: 5 minute timeout
✅ Cannot bypass MFA
✅ Cannot access dashboard without both factors

AUDIT LOGGING:
✅ All email sends logged
✅ All code verifications logged
✅ All MFA events logged
✅ IP address and user agent tracked

HTTPS:
✅ Must be enabled in production
✅ Secure, HTTPOnly, SameSite cookies

═══════════════════════════════════════════════════════════════════════════
✅ SUCCESS CRITERIA - YOU'RE DONE WHEN ALL PASS
═══════════════════════════════════════════════════════════════════════════

FUNCTIONALITY:
□ Email sent to brooketogo98@gmail.com successfully
□ Email contains 6-digit code  
□ Email code verification works
□ Invalid codes rejected
□ Expired codes rejected (after 10 min)
□ Used codes cannot be reused
□ QR code displays on /mfa/setup
□ QR scans with Microsoft Authenticator
□ TOTP verification works
□ Invalid TOTP rejected
□ 10 backup codes generated
□ Backup codes work for recovery
□ Used backup codes cannot be reused
□ Full flow works: email → code → MFA → dashboard

SECURITY:
□ Email codes hashed in database (not readable)
□ TOTP secrets encrypted in database (not readable)
□ Backup codes hashed in database
□ Cannot access /dashboard without email verification
□ Cannot access /dashboard without MFA verification
□ Email session expires after 15 minutes
□ MFA session expires after 5 minutes
□ Rate limiting works (max 3 codes/hour)
□ All events logged in audit tables

DATABASE:
□ users_email table exists
□ email_verification_codes table exists
□ email_auth_audit table exists
□ user_mfa table exists
□ mfa_audit_log table exists
□ All indexes created
□ Foreign keys working

═══════════════════════════════════════════════════════════════════════════
🧪 TESTING PROCEDURES
═══════════════════════════════════════════════════════════════════════════

TEST 1: Email Sending
```bash
python3 test_email_sending.py
# Check brooketogo98@gmail.com inbox
```

TEST 2: Database Tables
```bash
sqlite3 /workspace/Application/stitch.db ".tables" | grep -E "(email|mfa)"
# Should show: users_email, email_verification_codes, email_auth_audit, user_mfa, mfa_audit_log
```

TEST 3: Full Login Flow
```bash
python3 web_app_real.py
# Browser: http://localhost:5000/login
# 1. Enter: brooketogo98@gmail.com
# 2. Check email for code
# 3. Enter code  
# 4. Scan QR with Microsoft Authenticator
# 5. Enter TOTP from app
# 6. Save backup codes
# 7. Should reach dashboard ✅
```

TEST 4: Security Verification
```bash
# Email codes are hashed?
sqlite3 /workspace/Application/stitch.db "SELECT code_hash FROM email_verification_codes LIMIT 1;"
# Should see: long hex string (not readable 6-digit code)

# TOTP secrets are encrypted?
sqlite3 /workspace/Application/stitch.db "SELECT mfa_secret FROM user_mfa LIMIT 1;"
# Should see: encrypted string (not readable base32)
```

═══════════════════════════════════════════════════════════════════════════
🆘 TROUBLESHOOTING
═══════════════════════════════════════════════════════════════════════════

EMAIL NOT SENDING?
→ Check: echo $STITCH_SMTP_USER
→ Check: echo $STITCH_SMTP_PASSWORD  
→ Verify using App Password, not real Gmail password
→ Test: python3 -c "from email_manager import email_manager; print(email_manager.test_email_connection())"

DATABASE ERRORS?
→ Run: python3 create_email_tables.py
→ Run: python3 create_mfa_tables.py
→ Check: ls -la /workspace/Application/stitch.db

TOTP ALWAYS FAILS?
→ Check server time: date
→ Should match phone time (±30 seconds)
→ Install NTP: sudo apt-get install ntp

═══════════════════════════════════════════════════════════════════════════
📊 IMPLEMENTATION TIMELINE
═══════════════════════════════════════════════════════════════════════════

Manual Implementation: 9-14 days
With AI Assistance: 2-3 days

Phase 1 (Email): 2 days
Phase 2 (Pages): 1 day  
Phase 3 (MFA): 2 days
Phase 4 (Routes): 2 days
Phase 5 (Testing): 2 days

═══════════════════════════════════════════════════════════════════════════
📖 DELIVERABLES - WHAT TO PROVIDE WHEN COMPLETE
═══════════════════════════════════════════════════════════════════════════

1. FILE SUMMARY:
   - List all files created with sizes
   - List all files modified

2. TEST RESULTS:
   - Screenshot of test email
   - All test script outputs
   - Confirmation all flows work

3. DATABASE VERIFICATION:
   - Output from .tables command
   - Sample showing hashed codes

4. SECURITY CONFIRMATION:
   - Email codes hashed ✅
   - TOTP secrets encrypted ✅
   - Audit logging works ✅
   - Rate limiting works ✅
   - Sessions timeout ✅

═══════════════════════════════════════════════════════════════════════════
🎬 START HERE - IMMEDIATE NEXT STEPS
═══════════════════════════════════════════════════════════════════════════

STEP 1: Read documentation (30-45 minutes)
   → /workspace/PASSWORDLESS_MFA_SECURITY_ANALYSIS.md
   → /workspace/PASSWORDLESS_MFA_IMPLEMENTATION_GUIDE.md
   → /workspace/PASSWORDLESS_MFA_AI_PROMPT.md

STEP 2: Set up Gmail App Password (15 minutes)
   → https://myaccount.google.com/security
   → Enable 2FA on brooketogo98@gmail.com
   → Create App Password
   → Set environment variables

STEP 3: Create backup (2 minutes)
   cd /workspace
   tar -czf passwordless_backup_$(date +%Y%m%d).tar.gz web_app_real.py config.py templates/

STEP 4: Install dependencies (5 minutes)
   pip3 install pyotp qrcode pillow cryptography

STEP 5: Begin Phase 1 (2-3 hours)
   → Create email_manager.py
   → Create create_email_tables.py
   → Run database creation
   → Test email sending

STEP 6: Continue through phases 2-5 sequentially

═══════════════════════════════════════════════════════════════════════════
💡 WHY THIS IS BETTER THAN PASSWORDS
═══════════════════════════════════════════════════════════════════════════

WITH PASSWORDS:
❌ Weak passwords chosen
❌ Password reuse across sites
❌ Phishing steals passwords
❌ Keyloggers capture passwords
❌ Database breaches leak passwords
❌ Social engineering tricks users
❌ Brute force attacks possible

WITH PASSWORDLESS + MFA:
✅ No password to steal
✅ No password reuse
✅ Phishing can't get email code
✅ Keyloggers useless (codes expire)
✅ No passwords in database to breach
✅ Requires email + phone access
✅ Brute force impossible

ATTACKER NEEDS:
✅ Access to brooketogo98@gmail.com inbox
✅ Physical access to phone with authenticator
✅ Both within 10-minute window
✅ Bypass Gmail's own 2FA

= NEARLY IMPOSSIBLE TO COMPROMISE

═══════════════════════════════════════════════════════════════════════════
🎯 FINAL REMINDERS
═══════════════════════════════════════════════════════════════════════════

✅ DO set up Gmail App Password FIRST
✅ DO create backup before modifying files
✅ DO follow phases in exact order
✅ DO test after each phase
✅ DO verify security measures

❌ DON'T use real Gmail password for SMTP
❌ DON'T store email codes as plaintext
❌ DON'T skip encryption for TOTP secrets
❌ DON'T skip rate limiting
❌ DON'T forget audit logging

═══════════════════════════════════════════════════════════════════════════
🚀 YOU'VE GOT THIS!
═══════════════════════════════════════════════════════════════════════════

Everything you need is in the documentation.

The implementation guide has EVERY line of code.

Follow the phases in order, test frequently, and you'll build a secure,
passwordless authentication system that's 95% more secure than passwords.

Primary Email: brooketogo98@gmail.com
System: Oranolio/Stitch RAT
Authentication: Email Code + TOTP (NO PASSWORDS!)

Good luck! 🔐✨

═══════════════════════════════════════════════════════════════════════════
END OF PROMPT - BEGIN IMPLEMENTATION NOW
═══════════════════════════════════════════════════════════════════════════
