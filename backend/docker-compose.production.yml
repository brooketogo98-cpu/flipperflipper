version: '3.8'

services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: proxyassessment_postgres
    environment:
      POSTGRES_DB: proxydb
      POSTGRES_USER: proxyuser
      POSTGRES_PASSWORD: ${DB_PASSWORD:-proxypass123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U proxyuser -d proxydb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - proxynet

  # Redis with persistence and optimizations
  redis:
    image: redis:7-alpine
    container_name: proxyassessment_redis
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --tcp-backlog 511
      --timeout 0
      --tcp-keepalive 300
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - proxynet

  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: proxyassessment_backend:latest
    container_name: proxyassessment_backend
    environment:
      DATABASE_URL: postgresql://proxyuser:${DB_PASSWORD:-proxypass123}@postgres:5432/proxydb
      REDIS_URL: redis://redis:6379/0
      API_HOST: 0.0.0.0
      API_PORT: 8000
      WORKERS: ${WORKERS:-4}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      GEOIP_PATH: /app/geoip/GeoLite2-City.mmdb
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./geoip:/app/geoip:ro
    command: >
      uvicorn proxy_tester:app 
      --host 0.0.0.0 
      --port 8000 
      --workers ${WORKERS:-4} 
      --log-level ${LOG_LEVEL:-info}
      --access-log
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - proxynet
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: proxyassessment_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ../frontend:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - proxynet

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: proxyassessment_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - proxynet

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: proxyassessment_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: redis-datasource,postgres-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - proxynet

  # Redis Exporter for Prometheus
  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: proxyassessment_redis_exporter
    environment:
      REDIS_ADDR: redis://redis:6379
    ports:
      - "9121:9121"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - proxynet

  # Postgres Exporter for Prometheus
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: proxyassessment_postgres_exporter
    environment:
      DATA_SOURCE_NAME: postgresql://proxyuser:${DB_PASSWORD:-proxypass123}@postgres:5432/proxydb?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - proxynet

  # Node Exporter for system metrics
  node_exporter:
    image: prom/node-exporter:latest
    container_name: proxyassessment_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - proxynet

  # Caddy for automatic SSL (alternative to manual Nginx SSL)
  caddy:
    image: caddy:alpine
    container_name: proxyassessment_caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    environment:
      DOMAIN: ${DOMAIN:-localhost}
    restart: unless-stopped
    networks:
      - proxynet
    profiles:
      - ssl

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  proxynet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16