version: '3.8'

services:
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-proxyuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-proxypass}
      POSTGRES_DB: ${DB_NAME:-proxydb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-proxyuser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  privastra-worker:
    build:
      context: .
      dockerfile: worker.Dockerfile
    restart: always
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=4 -Q privastra,default
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://${DB_USER:-proxyuser}:${DB_PASSWORD:-proxypass}@postgres:5432/${DB_NAME:-proxydb}
      - REDIS_URL=redis://redis:6379/1
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./app:/app/app
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  scheduler:
    build:
      context: .
      dockerfile: worker.Dockerfile
    restart: always
    command: celery -A app.core.celery_app beat --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://${DB_USER:-proxyuser}:${DB_PASSWORD:-proxypass}@postgres:5432/${DB_NAME:-proxydb}
      - REDIS_URL=redis://redis:6379/1
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./app:/app/app
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  scraper:
    build:
      context: .
      dockerfile: worker.Dockerfile
    restart: always
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=8 -Q scraper
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://${DB_USER:-proxyuser}:${DB_PASSWORD:-proxypass}@postgres:5432/${DB_NAME:-proxydb}
      - REDIS_URL=redis://redis:6379/1
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
      - MAX_CONCURRENT_REQUESTS=50
      - REQUEST_TIMEOUT=30
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./app:/app/app
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 1G

  flower:
    build:
      context: .
      dockerfile: worker.Dockerfile
    restart: always
    command: celery -A app.core.celery_app flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    ports:
      - "5555:5555"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 256M

volumes:
  redis_data:
  postgres_data: