name: No Static Content Guard

on:
  pull_request:
  push:
    branches: [main, develop]

jobs:
  static-content-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check for forbidden static content tokens
      run: |
        echo "Scanning for production-breaking static content..."
        
        # Define forbidden patterns
        FORBIDDEN_PATTERNS="mock\(|fixture\(|placeholder candidates|TODO|FIXME|staticData|stub\(|lorem|generateFake|createMock|dummyData|sampleData|testData|fakeData|Math\.random\(\) \* [0-9]+ \+ [0-9]+"
        
        # Define production source paths (exclude tests)
        PROD_PATHS="extension/src extension/dist packages/core/src packages/data/src packages/integrations/src"
        
        # Scan for forbidden content
        FOUND=0
        for path in $PROD_PATHS; do
          if [ -d "$path" ]; then
            echo "Scanning $path..."
            if grep -r -E "$FORBIDDEN_PATTERNS" "$path" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" 2>/dev/null; then
              FOUND=1
            fi
          fi
        done
        
        if [ $FOUND -eq 1 ]; then
          echo "❌ FAILED: Found forbidden static content in production code!"
          echo "Remove all mock data, placeholders, and TODOs from production paths."
          exit 1
        else
          echo "✅ PASSED: No forbidden static content found."
        fi
    
    - name: Verify critical UI elements are wired
      run: |
        echo "Checking that UI buttons have real handlers..."
        
        # Check dashboard.js has real handlers
        if ! grep -q "chrome.runtime.sendMessage" extension/dist/js/dashboard.js; then
          echo "❌ Dashboard missing message handlers"
          exit 1
        fi
        
        # Check background.js handles critical messages
        REQUIRED_HANDLERS="MAX_AUTO_ENABLE|STORE_SCAN_RESULTS|openDashboard"
        if ! grep -E "$REQUIRED_HANDLERS" extension/dist/js/background.js; then
          echo "❌ Background missing required message handlers"
          exit 1
        fi
        
        echo "✅ UI elements appear to be wired correctly"
    
    - name: Ensure content scripts have real parsing
      run: |
        echo "Verifying content scripts parse real data..."
        
        # Check for DOM parsing in content scripts
        for script in extension/dist/js/content-*.js; do
          if [ -f "$script" ]; then
            if ! grep -q "querySelector\|querySelectorAll" "$script"; then
              echo "❌ $script missing DOM parsing"
              exit 1
            fi
            if ! grep -q "chrome.runtime.sendMessage" "$script"; then
              echo "❌ $script missing message sending"
              exit 1
            fi
          fi
        done
        
        echo "✅ Content scripts have real parsing logic"