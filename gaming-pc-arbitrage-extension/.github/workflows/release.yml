name: Release to Chrome Web Store

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version $VERSION"
    
    - name: Update manifest version
      run: |
        cd extension
        node -e "
        const fs = require('fs');
        const manifest = JSON.parse(fs.readFileSync('manifest.json'));
        manifest.version = '${{ steps.get_version.outputs.VERSION }}';
        manifest.version_name = '${{ steps.get_version.outputs.VERSION }}+${{ github.sha }}';
        fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2));
        "
    
    - name: Create build info
      run: |
        cd extension
        echo '{
          "version": "${{ steps.get_version.outputs.VERSION }}",
          "hash": "${{ github.sha }}",
          "date": "'$(date -u +"%Y-%m-%d %H:%M:%S UTC")'"
        }' > build-info.json
    
    - name: Build extension
      run: |
        cd extension
        npm run build
    
    - name: Package extension
      run: |
        cd extension
        npm run package
        cp gaming-pc-arbitrage-extension.zip ../release.zip
    
    - name: Upload to Chrome Web Store
      env:
        CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
        CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
        CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
        EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
      run: |
        # Get access token
        ACCESS_TOKEN=$(curl -s -X POST \
          -d "client_id=${CHROME_CLIENT_ID}" \
          -d "client_secret=${CHROME_CLIENT_SECRET}" \
          -d "refresh_token=${CHROME_REFRESH_TOKEN}" \
          -d "grant_type=refresh_token" \
          https://oauth2.googleapis.com/token | jq -r .access_token)
        
        # Upload new version
        UPLOAD_RESPONSE=$(curl -s -X PUT \
          -H "Authorization: Bearer ${ACCESS_TOKEN}" \
          -H "x-goog-api-version: 2" \
          -T release.zip \
          https://www.googleapis.com/upload/chromewebstore/v1.1/items/${EXTENSION_ID})
        
        echo "Upload response: $UPLOAD_RESPONSE"
        
        # Check upload status
        if echo "$UPLOAD_RESPONSE" | grep -q "uploadState.*SUCCESS"; then
          echo "✅ Upload successful"
        else
          echo "❌ Upload failed"
          exit 1
        fi
        
        # Publish the item
        PUBLISH_RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer ${ACCESS_TOKEN}" \
          -H "x-goog-api-version: 2" \
          -H "Content-Length: 0" \
          https://www.googleapis.com/chromewebstore/v1.1/items/${EXTENSION_ID}/publish)
        
        echo "Publish response: $PUBLISH_RESPONSE"
    
    - name: Update releases.json
      run: |
        # Create or update releases.json
        RELEASES_FILE="releases.json"
        if [ ! -f "$RELEASES_FILE" ]; then
          echo "[]" > "$RELEASES_FILE"
        fi
        
        # Add new release
        node -e "
        const fs = require('fs');
        const releases = JSON.parse(fs.readFileSync('$RELEASES_FILE'));
        releases.unshift({
          version: '${{ steps.get_version.outputs.VERSION }}',
          hash: '${{ github.sha }}'.substring(0, 7),
          date: new Date().toISOString(),
          notes: 'Automated release from tag ${{ github.ref_name }}'
        });
        // Keep only last 10 releases
        releases.length = Math.min(releases.length, 10);
        fs.writeFileSync('$RELEASES_FILE', JSON.stringify(releases, null, 2));
        "
        
        # Commit and push
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add releases.json
        git commit -m "chore: update releases.json for v${{ steps.get_version.outputs.VERSION }}"
        git push origin HEAD:main
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Gaming PC Arbitrage Extension ${{ steps.get_version.outputs.VERSION }}
          
          ### 🚀 Automated Release
          
          This version has been automatically published to the Chrome Web Store.
          
          **Build Info:**
          - Version: ${{ steps.get_version.outputs.VERSION }}
          - Commit: ${{ github.sha }}
          - Date: ${{ steps.timestamp.outputs.date }}
          
          ### Installation
          
          **Chrome Web Store (Recommended):**
          - The extension will auto-update within 24 hours
          - Or manually check for updates in chrome://extensions
          
          **Manual Installation:**
          - Download the attached `gaming-pc-arbitrage-extension.zip`
          - Open chrome://extensions
          - Enable Developer Mode
          - Drag and drop the zip file
          
          ### What's New
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release.zip
        asset_name: gaming-pc-arbitrage-extension.zip
        asset_content_type: application/zip